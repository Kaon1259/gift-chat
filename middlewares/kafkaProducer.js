const { Kafka } = require('kafkajs');
require('dotenv').config();

exports.connectKafka = async (app)=>{

    try{
        const kafka = new Kafka(
            {
            clientId: process.env.KAFKA_CLIENTID,
            brokers: process.env.KAFKA_BROKERS.split(',').map(b => b.trim()),
            }
        );

        if(!kafka){
            return;
        }
        app.set('kafka', kafka);

        const admin = kafka.admin();
        app.set('kafkaAdmin', admin);
        
        const producer = kafka.producer();
        app.set('kafkaProducer', producer);

        const isProducerConnected = connectKafkaProducer(producer);
        app.set('kafkaProducerIsConnected', isProducerConnected);

        // await createTopicWithAdmin(admin, process.env.TOPIC_CHAT_REGISTRATION);

        // for(i=0; i < 10; i++){
        //     await addTopic(app, process.env.TOPIC_CHAT_REGISTRATION, generateUniqueId(), generateUniqueId());
        //     i++;
        // }

        // exploreTopics(admin);
    }catch(err){
        console.log(`connectKafka : ${err}`);
    }
}

async function connectKafkaProducer(producer) {
    let isProducerConnected = false;
    try {
        await producer.connect();
        isProducerConnected = true;
        console.log('Kafka ProducerÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
        console.error('Kafka Producer Ïó∞Í≤∞ Ïã§Ìå®:', error.message);
        // Ïó∞Í≤∞ Ïã§Ìå® Ïãú ÏÑúÎ≤ÑÎäî Ïã§ÌñâÌïòÎêò, Kafka Í¥ÄÎ†® Í∏∞Îä•ÏùÄ ÎπÑÌôúÏÑ±ÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.
        isProducerConnected = false; 
    }
    return isProducerConnected;
}

exports.setTopic = async(app, topic, key, data)=>{

    if (app.get('isProducerConnected')) {
        try {
            await producer.send({
                topic: topic,
                messages: [
                    {
                        // key: Î©îÏãúÏßÄÏùò ÌÇ§. Î≥¥ÌÜµ ÏÇ¨Ïö©Ïûê IDÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í∞ôÏùÄ ÏÇ¨Ïö©ÏûêÏùò Î©îÏãúÏßÄÎäî Í∞ôÏùÄ ÌååÌã∞ÏÖòÏóê Ï†ÄÏû•ÎêòÍ≤å Ìï©ÎãàÎã§.
                        key: String(key),
                        
                        // value: Ï†ÑÏÜ°Ìï† Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞. KafkaÏóêÏÑúÎäî Buffer(Î∞îÏù¥Ìä∏) ÌòïÌÉúÎ°ú Ï†ÑÏÜ°ÌïòÎ©∞, 
                        // JSON ÌòïÌÉúÎ•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÑÏÜ°ÌïòÎäî Í≤ÉÏù¥ ÏùºÎ∞òÏ†ÅÏûÖÎãàÎã§.
                        value: JSON.stringify(data),
                    },
                ],
            });
            console.log(`ÏÇ¨Ïö©Ïûê Îì±Î°ù Ï†ïÎ≥¥Í∞Ä Kafka ÌÜ†ÌîΩ '${top}'ÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.`);

        } catch (kafkaError) {
            console.error('Kafka Ï†ÑÏÜ° Ïò§Î•ò:', kafkaError.message);
        }
    } else {
        console.warn('Kafka ProducerÍ∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïÑ Ïù¥Î≤§Ìä∏Î•º Ï†ÑÏÜ°Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
}

async function addTopic(app, topic, key, data){

    if (app.get('isProducerConnected')) {
        try {
            const producer = app.get('kafkaProducer');

            await producer.send({
                topic: topic,
                messages: [
                    {
                        // key: Î©îÏãúÏßÄÏùò ÌÇ§. Î≥¥ÌÜµ ÏÇ¨Ïö©Ïûê IDÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í∞ôÏùÄ ÏÇ¨Ïö©ÏûêÏùò Î©îÏãúÏßÄÎäî Í∞ôÏùÄ ÌååÌã∞ÏÖòÏóê Ï†ÄÏû•ÎêòÍ≤å Ìï©ÎãàÎã§.
                        key: String(key),
                        
                        // value: Ï†ÑÏÜ°Ìï† Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞. KafkaÏóêÏÑúÎäî Buffer(Î∞îÏù¥Ìä∏) ÌòïÌÉúÎ°ú Ï†ÑÏÜ°ÌïòÎ©∞, 
                        // JSON ÌòïÌÉúÎ•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÑÏÜ°ÌïòÎäî Í≤ÉÏù¥ ÏùºÎ∞òÏ†ÅÏûÖÎãàÎã§.
                        value: JSON.stringify(data),
                    },
                ],
            });
            console.log(`ÏÇ¨Ïö©Ïûê Îì±Î°ù Ï†ïÎ≥¥Í∞Ä Kafka ÌÜ†ÌîΩ '${topic}'ÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.`);

        } catch (kafkaError) {
            console.error('Kafka Ï†ÑÏÜ° Ïò§Î•ò:', kafkaError.message);
        }
    } else {
        console.warn('Kafka ProducerÍ∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïÑ Ïù¥Î≤§Ìä∏Î•º Ï†ÑÏÜ°Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
} 

async function createTopicWithAdmin(admin, topic){
      await admin.createTopics({
            topics: [{
                topic: topic,
                numPartitions: 2, // ÌååÌã∞ÏÖò 2Í∞ú ÏÑ§Ï†ï
                replicationFactor: 1, // Î≥µÏ†ú Ìå©ÌÑ∞ 1 ÏÑ§Ï†ï
            }],
            waitForLeaders: true, // Î¶¨ÎçîÍ∞Ä ÏÑ†ÌÉùÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶º
        });
        console.log(`‚ú® ÌÜ†ÌîΩ '${topic}'Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÍ±∞ÎÇò Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.`);
}

async function exploreTopics(admin){
    try {
        await admin.connect();
        console.log('Kafka Admin ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÏÑ±Í≥µ');

        console.log('Kafka ÌÅ¥Îü¨Ïä§ÌÑ∞Ïùò Î™®Îì† ÌÜ†ÌîΩ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î•º ÏùΩÏñ¥ÏòµÎãàÎã§...');
        
        // Î™®Îì† ÌÜ†ÌîΩ Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Î†§Î©¥ Ïù∏Ïûê ÏóÜÏù¥ Ìò∏Ï∂úÌïòÍ±∞ÎÇò, listTopics()Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
        const allTopicsMetadata = await admin.fetchTopicMetadata();

        console.log(`\n================ Î™®Îì† ÌÜ†ÌîΩ Î™©Î°ù (${allTopicsMetadata.topics.length}Í∞ú) ================`);
        
        allTopicsMetadata.topics.forEach(topic => {
            console.log(`- ÌÜ†ÌîΩ Ïù¥Î¶Ñ: ${topic.name}`);
            console.log(`  ÌååÌã∞ÏÖò Ïàò: ${topic.partitions.length}Í∞ú`);
            // Ï∂îÍ∞Ä Ï†ïÎ≥¥: Í∞Å ÌååÌã∞ÏÖòÏùò Î¶¨Îçî, Î†àÌîåÎ¶¨Ïπ¥ Ï†ïÎ≥¥ Îì±
            topic.partitions.forEach(p => {
                console.log(`    [Partition ${p.partitionId}] Î¶¨Îçî: ${p.leader}, Î†àÌîåÎ¶¨Ïπ¥: [${p.replicas.join(', ')}]`);
            });
        });
        console.log('================================================================');

    } catch (error) {
        console.error('Kafka ÏûëÏóÖ Ïò§Î•ò:', error.message);
    } finally {
        await admin.disconnect();
        console.log('Admin ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ï¢ÖÎ£å');
    }
}

function generateUniqueId() {
    return Math.floor(Math.random() * 1000000);
}

// // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïãú Kafka Ïó∞Í≤∞ ÏãúÎèÑ
// connectKafkaProducer();

// // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¢ÖÎ£å Ïãú Kafka Ïó∞Í≤∞ Ìï¥Ï†ú
// process.on('SIGINT', async () => {
//     if (isProducerConnected) {
//         await producer.disconnect();
//         console.log('\nüîó Kafka Producer Ïó∞Í≤∞ Ï¢ÖÎ£åÎê®.');
//     }
//     process.exit(0);
// });
