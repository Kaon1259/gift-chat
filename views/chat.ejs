
<h1 class="room-title"><%= title || 'GIF 채팅방' %></h1>
<div class="room-actions">
  <a href="/" id="exit-btn" class="btn">방 나가기</a>
  <a href="/" id="join-room-btn" class="btn">참여하기</a>
  <a href="/" id="invite-friend-btn" class="btn">초대하기</a>
</div>

<section class="chat-panel">
  <div id="chat-list" class="chat-list">
    <% chats.forEach(function(chat){ 
         const type = chat.chatType || 'local';
         const from = chat.user || chat.from;
         const fromUserId = chat.userId;
         const to   = chat.to || '';
         const isSystem = chat.user === 'system';
         const isMine = String(from) === String(user.nick);
         const isWhisper = type === 'whisper';
         const isBroadcast = type === 'broadcast';
         const typeClass = isWhisper ? 'type-whisper' : (isBroadcast ? 'type-broadcast' : 'type-local');

         const sock = chat.socketId || '';
         const shortSock = sock ? `${sock.substring(0,4)}...` : '';
    %>
      <div 
        class="message <%= isSystem ? 'system' : (isMine ? 'mine' : 'other') %> <%= typeClass %>"
        <% if (isWhisper) { %>
          data-reply-socket-id="<%= sock %>" 
          data-reply-user="<%= from %>"
          data-reply-fromuser-id="<%= fromUserId %>"
        <% } %>
      >
        <% /* 방송일 때도 아바타 숨김: not isSystem && not isWhisper && not isBroadcast */ %>
        <% if (!isSystem && !isWhisper && !isBroadcast) { %>
          <div class="avatar" style="--avatar-color:<%= chat.color || '#888' %>;">
            <%= (String(from||'U').charAt(0) || 'U').toUpperCase() %>
          </div>
        <% } %>

        <div class="bubble <%= isBroadcast ? 'broadcast-bubble' : '' %>">
          <% if (isWhisper) { %>
            <!-- 귓속말 -->
            <div class="meta">[귓속말] <%= from || sock %> → <%= isMine ? (to || '상대') : '나' %></div>
            <div class="text"><%= chat.chat %></div>
            <% if (!isMine) { %>
              <div class="actions">
                <button type="button" class="btn btn-light whisper-reply"
                  data-socket-id="<%= sock %>"
                  data-user="<%= from %>"
                  data-fromuser-id="<%= fromUserId %>">답장</button>
              </div>
            <% } %>
          <% } else if (isBroadcast) { %>
            <!-- 방송: 전체 폭 + 외치기 아이콘 -->
            <div class="meta">
              <span class="shout-icon" aria-hidden="true">📢</span>
              <span class="badge type-broadcast">방송</span>
              <span class="route"><%= from || 'Guest' %> → 모두</span>
              <span class="sock socket-id-display" data-socket-id="<%= sock %>" 
                            data-fromuser-id="<%= fromUserId %>"><%= shortSock ? '(' + shortSock + ')' : '' %></span>
            </div>
            <% if (chat.gif) { %>
              <img class="bubble-gif" src="/gif/<%= chat.gif %>" alt="gif">
            <% } else { %>
              <div class="text"><%= chat.chat %></div>
            <% } %>

          <% } else { %>
            <!-- 일반(local) -->
            <% if (!isSystem) { %>
              <div class="meta">
                <span class="name socket-id-display" data-socket-id="<%= sock %>" data-fromuser-id="<%= fromUserId %>">
                  <%= from || 'Guest' %> <%= shortSock ? '(' + shortSock + ')' : '' %>
                </span>
                <span class="badge type-local">일반</span>
              </div>
            <% } %>
            <% if (chat.gif) { %>
              <img class="bubble-gif" src="/gif/<%= chat.gif %>" alt="gif">
            <% } else { %>
              <div class="text"><%= chat.chat %></div>
            <% } %>
          <% } %>
        </div>
      </div>
    <% }) %>
  </div>
</section>

<!-- ✅ 메시지 우클릭 컨텍스트 메뉴 -->
<div id="msg-context" class="context-menu" hidden>
  <button type="button" class="context-item" data-action="whisper">귓속말</button>
  <button type="button" class="context-item" data-action="friend">친구요청</button>
</div>


  <!-- 입력영역(작은 화면에서는 항상 하단 고정) -->
  <div class="composer">
    <form action="/chat" id="chat-form" method="post" enctype="multipart/form-data" class="composer-row">
      <label for="gif" class="btn btn-light">GIF</label>
      <input type="file" id="gif" name="gif" accept="image/gif" hidden>
      <input type="text" id="chat" name="chat" placeholder="메시지를 입력하세요…">
      <button type="submit" class="btn btn-primary">전송</button>
    </form>

    <form action="/broadcastchat" id="broadcastchat-form" method="post" class="composer-row">
      <label class="composer-label" for="broadcastchat-inpu">외치기</label>
      <input type="text" id="broadcastchat-input" name="chat" placeholder="모두에게 외치기">
      <button type="submit" class="btn">전송</button>
    </form>

    <!-- 귓속말 -->
    <form action="/whisperchat" id="whisperchat-form" method="post" class="composer-row whisper" style="display:none;">
      <input type="hidden" id="whisper-target-socketid" name="targetSocketId">
      <input type="hidden" id="whisper-source-user" name="sourceSocketUser" value="<%=user.nick%>">
      <input type="hidden" id="whisper-source-userid" name="sourceSocketUserId" value="<%=user._id%>">
      <input type="hidden" id="whisper-target-user" name="targetSocketUser">
      <span class="whisper-target">대상: <strong id="whisper-target-display"></strong></span>
      <input type="text" id="whisper-chat-input" name="chat" placeholder="귓속말 내용">
      <button type="submit" class="btn btn-accent">귓속말 전송</button>
      <button type="button" id="whisper-cancel-btn" class="btn btn-light">취소</button>
    </form>
  </div>

<!-- 기존 스크립트는 그대로 사용 (socket, axios 등) -->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  const glimpse = JSON.parse('<%- JSON.stringify(glimpse) %>');
  
  if (glimpse=== true) {
    document.querySelector('.composer').style.display = 'none';
  }else{
    const joinBtn = document.getElementById('join-room-btn');
    if (joinBtn) {
      joinBtn.style.display = 'none';
    }
  }

</script>
<script>
  const socket = io('/chat', { path: '/socket.io', withCredentials: true });
  const chatList = document.querySelector('#chat-list');
  const whisperForm = document.querySelector('#whisperchat-form');
  const whisperCancelBtn = document.querySelector('#whisper-cancel-btn');
  const whisperTargetDisplay = document.querySelector('#whisper-target-display');
  const whisperTargetSocketId = document.querySelector('#whisper-target-socketid');
  const whisperChatInput = document.querySelector('#whisper-chat-input');
  const myUser = {
    id: '<%= user._id %>',
    nick: '<%= user.nick %>',
  };


  socket.on('connect', () => {
    const roomId = new URL(location).pathname.split('/').at(-1);
    // 사용자 정보 (EJS에서 user 객체를 서버 렌더링 시 주입했다고 가정)
      // const userInfo = {
      //   id: '<%= user._id %>',
      //   nick: '<%= user.nick %>',
      // };
      // alert("Joining roomId: " + roomId + " as nick:" + myUser.nick + " userid (" + myUser.id + ")");
    socket.emit('join', {roomId, user:myUser});
  });

  // 시스템 메시지
  ['join','exit', 'leave'].forEach(evt => {
    socket.on(evt, data => {
      const div = document.createElement('div');
      div.className = 'message system';
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.textContent = data.chat;
      div.appendChild(bubble);
      chatList.appendChild(div);
      chatList.scrollTop = chatList.scrollHeight;
    });
  });


  // 귓속말 수신
socket.on('whisper', data => {
  // data: { fromSocketId, fromUser, chat }
  const div = document.createElement('div');
  // 기존 클래스 + 타입 구분 클래스 추가
  div.className = 'message system whisper-in type-whisper';

  // 답장에 쓰기 위해 데이터 보관
  div.dataset.replySocketId = data.fromSocketId || '';
  div.dataset.replyUser = data.fromUser || '';
  div.dataset.replyfromuserId = data.chat.userId || ''; 

  const bubble = document.createElement('div');
  bubble.className = 'bubble whisper-bubble'; // 버블에도 타입 클래스 추가

  const meta = document.createElement('div');
  meta.className = 'meta';
  meta.innerHTML = `[귓속말] ${data.fromUser || data.fromSocketId} → 나`;
  bubble.appendChild(meta);

  const text = document.createElement('div');
  text.className = 'text';
  text.textContent = data.chat || '';
  bubble.appendChild(text);

  // 답장 버튼
  const actions = document.createElement('div');
  actions.className = 'actions';
  const replyBtn = document.createElement('button');
  replyBtn.type = 'button';
  replyBtn.className = 'btn btn-light whisper-reply';
  replyBtn.dataset.socketId = data.fromSocketId || '';
  replyBtn.dataset.user = data.fromUser || '';
  replyBtn.dataset.fromuserId = data.chat.userId || ''; 
  replyBtn.textContent = '답장';
  actions.appendChild(replyBtn);
  bubble.appendChild(actions);

  div.appendChild(bubble);
  chatList.appendChild(div);

  // 부드럽게 맨 아래로
  div.scrollIntoView({ block: 'end' });
});


  // 일반/실시간 채팅
  socket.on('chat', function (data) {
    const doc = data.chat || data;
    const isMine = data.socketId && socket.id === data.socketId;

    const item = document.createElement('div');
    item.className = 'message ' + (isMine ? 'mine' : 'other');

    if (!isMine) {
      const avatar = document.createElement('div');
      avatar.className = 'avatar';
      avatar.style.backgroundColor = (doc.color || '#888');
      avatar.textContent = String(doc.user || 'U').charAt(0).toUpperCase();
      item.appendChild(avatar);
    }

    const bubble = document.createElement('div');
    bubble.className = 'bubble';

    const meta = document.createElement('div');
    meta.className = 'meta';
    const name = document.createElement('span');
    name.className = 'name socket-id-display';
    name.dataset.socketId = data.socketId || '';
    name.textContent = `${doc.user || 'Guest'} ${data.socketId ? '(' + data.socketId.substring(0,4) + '...)' : ''}`;
    name.dataset.fromuserId = data.chat.userId || ''; 
    meta.appendChild(name);
    bubble.appendChild(meta);

    if (doc.gif) {
      const img = document.createElement('img');
      img.className = 'bubble-gif';
      img.src = '/gif/' + doc.gif;
      bubble.appendChild(img);
    } else if (doc.chat) {
      const text = document.createElement('div');
      text.className = 'text';
      text.textContent = doc.chat;
      bubble.appendChild(text);
    }

    item.appendChild(bubble);
    chatList.appendChild(item);
    chatList.scrollTop = chatList.scrollHeight;
  });


  // 방송 채팅
socket.on('broadcastchat', data => {
  // data: { user, chat, gif, socketId? }
  const item = document.createElement('div');
  item.className = 'message system type-broadcast';   // 전체 폭 + 중앙 정렬

  const bubble = document.createElement('div');
  bubble.className = 'bubble broadcast-bubble';       // 방송 전용 버블 스타일

  // 메타: 📢 아이콘 + 방송 배지 + 라우팅 + (선택) 소켓ID
  const meta = document.createElement('div');
  meta.className = 'meta';

  const icon = document.createElement('span');
  icon.className = 'shout-icon';
  icon.textContent = '📢';

  const badge = document.createElement('span');
  badge.className = 'badge type-broadcast';
  badge.textContent = '방송';

  const route = document.createElement('span');
  route.className = 'route';
  route.textContent = `${data.user || 'Guest'} → 모두`;

  meta.append(icon, badge, route);

  // (선택) 짧은 소켓ID 표시
  if (data.socketId) {
    const shortSock = `${String(data.socketId).substring(0,4)}...`;
    const sock = document.createElement('span');
    sock.className = 'sock socket-id-display';
    sock.dataset.socketId = data.socketId;
    name.dataset.fromuserId = data.chat.userId || ''; 
    sock.textContent = ` (${shortSock})`;
    meta.appendChild(sock);
  }

  bubble.appendChild(meta);

  // 본문/이미지
  if (data.chat) {
    const text = document.createElement('div');
    text.className = 'text';
    text.textContent = data.chat;     // XSS 안전
    bubble.appendChild(text);
  }
  if (data.gif) {
    const img = document.createElement('img');
    img.className = 'bubble-gif';
    img.src = `/gif/${data.gif}`;
    img.alt = 'gif';
    bubble.appendChild(img);
  }

  item.appendChild(bubble);
  chatList.appendChild(item);
  item.scrollIntoView({ block: 'end' });
});


  const whisperTargetUserInput = document.querySelector('#whisper-target-user');
  
  function openWhisperForm(targetId, fromUser) {
    if (!targetId) return;
    if (targetId === socket.id) {
      alert('자기 자신에게는 귓속말을 보낼 수 없습니다.');
      return;
    }
    const shortSock = targetId.substring(0, 4) + '...';
    whisperTargetSocketId.value = targetId;
    whisperTargetDisplay.textContent = fromUser ? `${fromUser} (${shortSock})` : shortSock;
    whisperForm.style.display = 'grid';

    whisperTargetUserInput.value = fromUser || '';

    whisperChatInput.focus();
  }

  chatList.addEventListener('click', (e) => {
    // 1) "답장" 버튼 (가장 우선)
    const replyBtn = e.target.closest('.whisper-reply');
    if (replyBtn) {
      const targetId = replyBtn.dataset.socketId || '';
      const fromUser = replyBtn.dataset.user || '';
      openWhisperForm(targetId, fromUser);
      return; // 더 이상 전파 처리 X
    }

    // 2) 일반 메시지의 "이름(소켓ID)" 클릭
    const socketSpan = e.target.closest('.socket-id-display');
    if (socketSpan) {
      const targetId = socketSpan.dataset.socketId || '';
      const fromUser = socketSpan.textContent?.trim().split(' (')[0] || '';
      const fromUserId = socketSpan.dataset.fromuserId || '';

      if (!targetId) {
      //  alert('유효한 소켓 ID가 없습니다. :' + fromUserId);
        return;
      }
      
      const whisperForm = document.querySelector('#whisperchat-form');
      const whisperTargetUser = whisperForm.querySelector('#whisper-target-user');
      whisperTargetUser.value = fromUser || '';  // 예: 귓속말 대상의 닉네임

      openWhisperForm(targetId, fromUser);
      return;
    }

    // 3) 수신한 귓속말의 버블 클릭
    const whisperMsg = e.target.closest('.message.whisper-in');
    if (whisperMsg && whisperMsg.querySelector('.bubble')?.contains(e.target)) {
      const targetId = whisperMsg.dataset.replySocketId || '';
      const fromUser = whisperMsg.dataset.replyUser || '';
      const fromUserId = whisperMsg.dataset.replyfromuserId || '';
      openWhisperForm(targetId, fromUser);
      return;
    }
  });

  whisperCancelBtn.addEventListener('click', () => {
    whisperForm.style.display = 'none';
    whisperTargetSocketId.value = '';
    whisperChatInput.value = '';
  });

  // 전송 핸들러
  document.querySelector('#chat-form').addEventListener('submit', function (e) {
    e.preventDefault();
    if (this.chat.value) {
      axios.post('/room/<%= room._id %>/chat', { chat: this.chat.value })
        .then(() => { this.chat.value=''; })
        .catch(console.error);
    }
  });

  document.querySelector('#broadcastchat-form').addEventListener('submit', function (e) {
    e.preventDefault();
    if (this.chat.value) {
      axios.post('/room/<%= room._id %>/broadcastchat', { chat: this.chat.value })
        .then(() => { this.chat.value=''; })
        .catch(console.error);
    }
  });

  document.querySelector('#gif').addEventListener('change', e => {
    const file = e.target.files?.[0];
    if (!file) return;
    const formData = new FormData();
    formData.append('gif', file);
    axios.post('/room/<%= room._id %>/gif', formData)
      .then(() => { e.target.value = null; })
      .catch(console.error);
  });


document.querySelector('#whisperchat-form').addEventListener('submit', function (e) {
  e.preventDefault();

  const targetSocketId = this.targetSocketId.value?.trim();
  const chat = this.chat.value?.trim();
  const targetSocketUser = this.targetSocketUser.value?.trim();
  const sourceSocketUser = this.sourceSocketUser.value?.trim();

  if (targetSocketId && chat) {
    axios.post('/room/<%= room._id %>/whisperchat', {
      targetSocketId,
      targetSocketUser,
      sourceSocketUser,
      chat,
    })
    .then(() => {
      // 내 화면에도 "내가 보낸 귓속말" 표시
      const div = document.createElement('div');
      div.className = 'message system whisper-out type-whisper'; // 통일된 타입 클래스 추가

      // 답장용 데이터 보관
      div.dataset.replySocketId = targetSocketId;
      div.dataset.replyUser = targetSocketUser;

      const bubble = document.createElement('div');
      bubble.className = 'bubble whisper-bubble'; // 버블 타입 클래스

      // meta: 보낸 쪽이므로 나 → 상대
      const meta = document.createElement('div');
      meta.className = 'meta';
      meta.innerHTML = `[귓속말] 나 → ${targetSocketUser || (targetSocketId.substring(0, 4) + '...')}`;
      bubble.appendChild(meta);

      // 본문
      const textEl = document.createElement('div');
      textEl.className = 'text';
      textEl.textContent = chat;
      bubble.appendChild(textEl);

      // 답장 버튼 (상대에게 바로 답장할 수 있게)
      const actions = document.createElement('div');
      actions.className = 'actions';
      bubble.appendChild(actions);

      div.appendChild(bubble);
      chatList.appendChild(div);
      div.scrollIntoView({ block: 'end' }); // 부드럽게 스크롤

      // 폼 리셋
      this.chat.value = '';
      this.targetSocketId.value = '';
      this.style.display = 'none';
    })
    .catch(console.error);
  }
});

// ✅ ③ 방 나가기 핸들러 추가 (이 코드)
  (function() {
    const exitBtn = document.getElementById('exit-btn');
    if (!exitBtn) return;

    exitBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const href = exitBtn.getAttribute('href') || '/';
      const roomId = new URL(location).pathname.split('/').at(-1);

       // 사용자 정보 (EJS에서 user 객체를 서버 렌더링 시 주입했다고 가정)
      const userInfo = {
        id: '<%= user._id %>',
        nick: '<%= user.nick %>',
      };

      // 소켓으로 leave 보내고 ACK 받으면 이동
      let moved = false;
      socket.timeout(1000).emit('leave', { roomId, user: userInfo }, () => {
        if (!moved) {
          moved = true;
          location.assign(href);
        }
      });

      // 1초 내 ACK 못 받으면 폴백으로 그냥 이동
      setTimeout(() => {
        if (!moved) location.assign(href);
      }, 1200);
    });
  })();

  // 엿보기 하다 대회에 참여하기
  (function() {
    const joinBtn = document.getElementById('join-room-btn');
    if (!joinBtn) return;

    joinBtn.addEventListener('click', (e) => {
      e.preventDefault();

      // const glimpse = JSON.parse('<%- JSON.stringify(glimpse) %>');
  
      // if (glimpse=== true) {
        document.querySelector('.composer').style.display = 'block';
      //}

      const roomId = '<%= room._id %>';
      location.assign(`/room/${roomId}`);

      // const roomId = new URL(location).pathname.split('/').at(-1);
      // const userInfo = {
      //   id: '<%= user._id %>',
      //   nick: '<%= user.nick %>',
      // };

      // socket.emit('join', { roomId, user: userInfo });

      // // 참여 성공 시 채팅방으로 이동
      // location.assign(`/chat/${roomId}`);
    });
  })();


  (function() {
    const chatList = document.getElementById('chat-list');
    const menu = document.getElementById('msg-context');

    /** 현재 컨텍스트 대상 저장 */
    let ctx = { socketId: '', user: '', fromUserId: '' };

    /** 대상 추출: 우클릭한 요소 기준으로 socketId/닉네임 찾기 */
    function extractTargetInfo(target) {
      // 1) 귓속말로 온 메시지의 루트 (수신)
      const whisperIn = target.closest('.message.whisper-in');
      if (whisperIn && (whisperIn.dataset.replySocketId || whisperIn.dataset.replyUser || whisperIn.dataset.replyfromuserId)) {
        return {
          socketId: whisperIn.dataset.replySocketId || '',
          user: whisperIn.dataset.replyUser || '',
          userId: whisperIn.dataset.replyfromuserId || '',
        };
      }

      // 2) 일반/방송 메시지의 "이름(소켓ID)" 영역
      const sockSpan = target.closest('.socket-id-display');
      if (sockSpan) {
        const socketId = sockSpan.dataset.socketId || '';
        const fromUserId = sockSpan.dataset.fromuserId || '';

        // 텍스트: "닉네임 (ABCD...)" 형태일 수 있음
        const raw = (sockSpan.textContent || '').trim();
        const user = raw.split(' (')[0] || '';
        return { socketId, user, fromUserId };
      }

      // 3) 메시지 루트에서 socket-id-display 찾기 (버블 내부 등)
      const msg = target.closest('.message');
      if (msg) {
        const inner = msg.querySelector('.socket-id-display');
        if (inner) {
          const socketId = inner.dataset.socketId || '';
          const fromUserId = sockSpan.dataset.fromuserId || '';
          const raw = (inner.textContent || '').trim();
          const user = raw.split(' (')[0] || '';
          return { socketId, user, fromUserId };
        }
      }

      return { socketId: '', user: '', fromUserId: '' };
    }

    /** 메뉴 표시 */
    function showMenu(x, y) {
      menu.style.left = x + 'px';
      menu.style.top = y + 'px';
      menu.hidden = false;
    }
    /** 메뉴 숨김 */
    function hideMenu() {
      menu.hidden = true;
      ctx = { socketId: '', user: '' };
    }

    /** 뷰포트 밖으로 삐져나가면 보정 */
    function clampAndShow(x, y) {
      const pad = 6;
      const mw = 180;  // 대략적 메뉴 폭
      const mh = 90;   // 대략적 메뉴 높이
      const vw = window.innerWidth;
      const vh = window.innerHeight;
      const nx = Math.min(Math.max(pad, x), vw - mw - pad);
      const ny = Math.min(Math.max(pad, y), vh - mh - pad);
      showMenu(nx, ny);
    }

    /** 우클릭 열기 */
    chatList.addEventListener('contextmenu', (e) => {
      // 우클릭 기본 메뉴 중단
      e.preventDefault();

      // 대상 정보 추출
      const info = extractTargetInfo(e.target);

      alert(`Context Info:\nsocketId: ${info.socketId}\nuser: ${info.user}\nfromUserId: ${info.fromUserId}`);

      if(myUser.id === info.fromUserId){
        hideMenu();
        return;
      }

      // socketId가 없거나 내 메시지(내 소켓)라면 메뉴 띄우지 않음
      if (!info.socketId && !info.fromUserId) { hideMenu(); return; }

      if(info.socketId){
        if (info.socketId === (socket && socket.id)) { hideMenu(); return; }
      }else if(!info.fromUserId){
        hideMenu(); return;
      }

      if(!info.socketId){
        const whisperBtn = document.querySelector('#msg-context [data-action="whisper"]');
        if(whisperBtn) whisperBtn.style.display = 'none';
      }

      ctx = info; // 저장
      clampAndShow(e.clientX, e.clientY);
    });

    /** 메뉴 항목 클릭 */
    menu.addEventListener('click', async (e) => {
      const btn = e.target.closest('.context-item');
      if (!btn) return;
      
      const action = btn.dataset.action;

      // 안전 가드
      //if (!ctx.socketId) { hideMenu(); return; }

      if (action === 'whisper') {
        if (!ctx.socketId) { hideMenu(); return; }

        // 기존 로직 재사용
        openWhisperForm(ctx.socketId, ctx.user);
        hideMenu();
        return;
      }

      if (action === 'friend') {
        try {
          if (!ctx.fromUserId) { hideMenu(); return; } 
          
          const res = await axios.post('/friend/request', {
            addresseeNick: ctx.user || undefined,
            addressee: ctx.fromUserId || undefined,
          });
      
          if(res.status === 200){
            alert(`${res.data.message ? '(' + res.data.message + ')' : ''}`);
          }else if(res.status === 201){
            alert(`${ctx.user}님 ${res.data.message ? '(' + res.data.message + ')' : ''}`);
          }
          else{
            alert('친구 요청에 실패했습니다: ' + (res.data.message || '알 수 없는 오류'));
          }
        } catch (err) {
          console.error(err);
          alert('친구 요청 중 오류가 발생했습니다.');
        } finally {
          hideMenu();
        }
        return;
      }
    });

    /** 메뉴 외부 클릭/스크롤/ESC로 닫기 */
    document.addEventListener('click', (e) => {
      if (!menu.hidden && !menu.contains(e.target)) hideMenu();
    });
    document.addEventListener('scroll', hideMenu, true);
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') hideMenu();
    });

    /** 모바일 롱프레스 대응(선택) */
    // 필요하면 터치 길게 눌러서 contextmenu와 동일 동작하도록 구현할 수 있습니다.
  })();
</script>
