
<h1 class="room-title"><%= title || 'GIF 채팅방' %></h1>
<div class="room-actions">
  <a href="/" id="exit-btn" class="btn">방 나가기</a>
</div>

<section class="chat-panel">
  <div id="chat-list" class="chat-list">
    <% chats.forEach(function(chat){ 
         const isSystem = chat.user === 'system';
         const isMine = String(chat.user) === String(user);
         const sock = chat.socketId || '';
         const shortSock = sock ? `${sock.substring(0,4)}...` : '';
    %>
      <div class="message <%= isSystem ? 'system' : (isMine ? 'mine' : 'other') %>">
        <% if (!isSystem) { %>
          <div class="avatar" style="--avatar-color:<%= chat.color || '#888' %>;">
            <%= (String(chat.user||'U').charAt(0) || 'U').toUpperCase() %>
          </div>
        <% } %>

        <div class="bubble">
          <% if (!isSystem) { %>
            <div class="meta">
              <span class="name socket-id-display" data-socket-id="<%= sock %>">
                <%= chat.user || 'Guest' %> <%= shortSock ? '(' + shortSock + ')' : '' %>
              </span>
            </div>
          <% } %>

          <% if (chat.gif) { %>
            <img class="bubble-gif" src="/gif/<%= chat.gif %>" alt="gif">
          <% } else { %>
            <div class="text"><%= chat.chat %></div>
          <% } %>
        </div>
      </div>
    <% }) %>
  </div>

  <!-- 입력영역(작은 화면에서는 항상 하단 고정) -->
  <div class="composer">
    <form action="/chat" id="chat-form" method="post" enctype="multipart/form-data" class="composer-row">
      <label for="gif" class="btn btn-light">GIF</label>
      <input type="file" id="gif" name="gif" accept="image/gif" hidden>
      <input type="text" id="chat" name="chat" placeholder="메시지를 입력하세요…">
      <button type="submit" class="btn btn-primary">전송</button>
    </form>

    <form action="/broadcastchat" id="broadcastchat-form" method="post" class="composer-row">
      <label class="composer-label">외치기</label>
      <input type="text" id="broadcastchat-input" name="chat" placeholder="모두에게 외치기">
      <button type="submit" class="btn">전송</button>
    </form>

    <!-- 귓속말 -->
    <form action="/whisperchat" id="whisperchat-form" method="post" class="composer-row whisper" style="display:none;">
      <input type="hidden" id="whisper-target-socketid" name="targetSocketId">
      <input type="hidden" id="whisper-target-user" name="targetSocketUser" value="<%=user.nick%>">
      <span class="whisper-target">대상: <strong id="whisper-target-display"></strong></span>
      <input type="text" id="whisper-chat-input" name="chat" placeholder="귓속말 내용">
      <button type="submit" class="btn btn-accent">귓속말 전송</button>
      <button type="button" id="whisper-cancel-btn" class="btn btn-light">취소</button>
    </form>
  </div>
</section>

<!-- 기존 스크립트는 그대로 사용 (socket, axios 등) -->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io('/chat', { path: '/socket.io', withCredentials: true });
  const myUser = '<%= user %>';
  const chatList = document.querySelector('#chat-list');
  const whisperForm = document.querySelector('#whisperchat-form');
  const whisperCancelBtn = document.querySelector('#whisper-cancel-btn');
  const whisperTargetDisplay = document.querySelector('#whisper-target-display');
  const whisperTargetSocketId = document.querySelector('#whisper-target-socketid');
  const whisperChatInput = document.querySelector('#whisper-chat-input');

  socket.on('connect', () => {
    const roomId = new URL(location).pathname.split('/').at(-1);
    socket.emit('join', roomId);
  });

  // 시스템 메시지
  ['join','exit'].forEach(evt => {
    socket.on(evt, data => {
      const div = document.createElement('div');
      div.className = 'message system';
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.textContent = data.chat;
      div.appendChild(bubble);
      chatList.appendChild(div);
      chatList.scrollTop = chatList.scrollHeight;
    });
  });

  // 귓속말 수신
  socket.on('whisper', data => {
    const div = document.createElement('div');
    div.className = 'message system whisper-in';
    const bubble = document.createElement('div');
    bubble.className = 'bubble';
    bubble.innerHTML = `<div class="meta">[귓속말] ${data.fromUser || data.fromSocketId} → 나</div><div class="text">${data.chat}</div>`;
    div.appendChild(bubble);
    chatList.appendChild(div);
    chatList.scrollTop = chatList.scrollHeight;
  });

  // 일반/실시간 채팅
  socket.on('chat', function (data) {
    const doc = data.chat || data;
    const isMine = data.socketId && socket.id === data.socketId;

    const item = document.createElement('div');
    item.className = 'message ' + (isMine ? 'mine' : 'other');

    if (!isMine) {
      const avatar = document.createElement('div');
      avatar.className = 'avatar';
      avatar.style.backgroundColor = (doc.color || '#888');
      avatar.textContent = String(doc.user || 'U').charAt(0).toUpperCase();
      item.appendChild(avatar);
    }

    const bubble = document.createElement('div');
    bubble.className = 'bubble';

    const meta = document.createElement('div');
    meta.className = 'meta';
    const name = document.createElement('span');
    name.className = 'name socket-id-display';
    name.dataset.socketId = data.socketId || '';
    name.textContent = `${doc.user || 'Guest'} ${data.socketId ? '(' + data.socketId.substring(0,4) + '...)' : ''}`;
    meta.appendChild(name);
    bubble.appendChild(meta);

    if (doc.gif) {
      const img = document.createElement('img');
      img.className = 'bubble-gif';
      img.src = '/gif/' + doc.gif;
      bubble.appendChild(img);
    } else if (doc.chat) {
      const text = document.createElement('div');
      text.className = 'text';
      text.textContent = doc.chat;
      bubble.appendChild(text);
    }

    item.appendChild(bubble);
    chatList.appendChild(item);
    chatList.scrollTop = chatList.scrollHeight;
  });

  // 방송 채팅
  socket.on('broadcastchat', data => {
    const isMine = data.user === '<%= user %>';
    const item = document.createElement('div');
    item.className = 'message ' + (isMine ? 'mine' : 'other');
    const bubble = document.createElement('div');
    bubble.className = 'bubble';
    bubble.innerHTML = `<div class="meta"><span class="name">${data.user}</span></div>`;
    if (data.chat) bubble.innerHTML += `<div class="text">${data.chat}</div>`;
    if (data.gif)  bubble.innerHTML += `<img class="bubble-gif" src="/gif/${data.gif}">`;
    item.appendChild(bubble);
    chatList.appendChild(item);
    chatList.scrollTop = chatList.scrollHeight;
  });

  // 귓속말 트리거
  chatList.addEventListener('click', e => {
    if (e.target.classList.contains('socket-id-display')) {
      const targetId = e.target.dataset.socketId;
      if (!targetId || targetId === socket.id) {
        alert(targetId ? '자기 자신에게는 귓속말을 보낼 수 없습니다.' : '유효한 소켓 ID가 없습니다.');
        return;
      }

      whisperTargetSocketId.value = targetId;
      whisperTargetDisplay.textContent = targetId;
      whisperForm.style.display = 'grid';
      whisperChatInput.focus();
    }
  });

  whisperCancelBtn.addEventListener('click', () => {
    whisperForm.style.display = 'none';
    whisperTargetSocketId.value = '';
    whisperChatInput.value = '';
  });

  // 전송 핸들러
  document.querySelector('#chat-form').addEventListener('submit', function (e) {
    e.preventDefault();
    if (this.chat.value) {
      axios.post('/room/<%= room._id %>/chat', { chat: this.chat.value })
        .then(() => { this.chat.value=''; })
        .catch(console.error);
    }
  });

  document.querySelector('#broadcastchat-form').addEventListener('submit', function (e) {
    e.preventDefault();
    if (this.chat.value) {
      axios.post('/room/<%= room._id %>/broadcastchat', { chat: this.chat.value })
        .then(() => { this.chat.value=''; })
        .catch(console.error);
    }
  });

  document.querySelector('#gif').addEventListener('change', e => {
    const file = e.target.files?.[0];
    if (!file) return;
    const formData = new FormData();
    formData.append('gif', file);
    axios.post('/room/<%= room._id %>/gif', formData)
      .then(() => { e.target.value = null; })
      .catch(console.error);
  });

  document.querySelector('#whisperchat-form').addEventListener('submit', function (e) {
  e.preventDefault();

  const targetSocketId = this.targetSocketId.value?.trim();
  const chat = this.chat.value?.trim();
  const targetSocketUser = this.targetSocketUser.value?.trim();

  if (targetSocketId && chat) {
    axios.post('/room/<%= room._id %>/whisperchat', {
      targetSocketId,
      targetSocketUser,
      chat,
    })
    .then(() => {
      this.chat.value = '';
      this.targetSocketId.value = '';
      this.style.display = 'none';
    })
    .catch(console.error);
  }
});
</script>
