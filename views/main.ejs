<section class="rooms-wrap">
  
  <div class="rooms-card">
    <header class="rooms-head">
      <h2>채팅방 목록</h2>
      <a href="/room" class="btn btn-primary">채팅방 생성</a>
    </header>

    <div class="table-scroller">
      <table id="room-list" class="pretty-table">
        <!-- ✅ 열 폭/가독성 가이드 (CSS의 .col-* 규칙을 사용합니다) -->
        <colgroup>
          <col class="col-title">    <!-- 제목: 가장 넓게(말줄임) -->
          <col class="col-type">     <!-- 종류: 고정폭, nowrap -->
          <col class="col-count">    <!-- 인원: 고정폭, nowrap -->
          <col class="col-owner">    <!-- 방장: 중간폭(말줄임) -->
          <col class="col-action">   <!-- 액션: 최소폭 -->
          <col class="col-created">  <!-- 생성시간: 고정폭, nowrap -->
        </colgroup>

        <thead>
          <tr>
            <th>방 제목</th>
            <th>종류</th>
            <th>인원</th>
            <th>방장</th>
            <th>액션</th>
            <th>액션</th>
            <th>생성시간</th>
          </tr>
        </thead>

        <tbody>
        <% if (Array.isArray(rooms) && rooms.length) { %>
          <% rooms.forEach(function(room) { 
               const current = room.current || (room.members ? room.members.length : 0); 
               const created = room.createdAt ? new Date(room.createdAt) : null;

               // 상대시간(일/시간/분 전)
               function rel(created) {
                 if (!created) return '-';
                 const diffMs = Date.now() - created.getTime();
                 const totalMin = Math.max(0, Math.floor(diffMs / 60000));
                 const days  = Math.floor(totalMin / 1440);
                 const hours = Math.floor((totalMin % 1440) / 60);
                 const mins  = totalMin % 60;
                 const parts = [];
                 if (days)  parts.push(days + '일');
                 if (hours) parts.push(hours + '시간');
                 if (mins || (!days && !hours)) parts.push(mins + '분');
                 return parts.join(' ') + ' 전';
               }
               // 절대시간(YYYY-MM-DD HH:mm:ss)
               function abs(created){
                 if (!created) return '-';
                 const pad = n => String(n).padStart(2,'0');
                 const y = created.getFullYear();
                 const m = pad(created.getMonth()+1);
                 const d = pad(created.getDate());
                 const hh = pad(created.getHours());
                 const mm = pad(created.getMinutes());
                 const ss = pad(created.getSeconds());
                 return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;
               }

               const relativeText = created ? rel(created) : '-';
               const absoluteText = created ? abs(created) : '-';
          %>
          <!-- ✅ 현재 인원/최대 인원 data-* 보관 + 인원셀 id 부여 -->
          <tr data-id="<%= room._id %>" data-current="<%= current %>" data-max="<%= room.max %>">
            <td class="cell-title" title="<%= room.title %>">
              <span class="title-text"><%= room.title %></span>
            </td>
            <td class="cell-type"><%= room.password ? '비밀방' : '공개방' %></td>
            <td class="cell-count" id="count-<%= room._id %>"><%= current %> / <%= room.max %></td>
            <td class="cell-owner"
                title="<%= room.owner %>"
                <% if (room.ownerColor) { %> style="color:<%= room.ownerColor %>" <% } %>>
              <span class="owner-text"><%= room.owner %></span>
            </td>
            <td class="action-cell">
              <button
                data-password="<%= room.password ? 'true' : 'false' %>"
                data-id="<%= room._id %>"
                class="btn join-btn">입장</button>
            </td>
            <td class="action-cell">
              <button
                data-password="<%= room.password ? 'true' : 'false' %>"
                data-id="<%= room._id %>"
                class="btn glimpse-btn">엿보기</button>
            </td>
            <td class="cell-created" title="<%= room.createdAt ? room.createdAt.toISOString() : '' %>">
              <span class="created-relative"><%= relativeText %></span>
              <span class="created-sep"> · </span>
              <span class="created-abs"><%= absoluteText %></span>
            </td>
          </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="6" class="empty-cell">등록된 채팅방이 없습니다.</td>
          </tr>
        <% } %>
        </tbody>
      </table>
    </div>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="error-message" style="margin-top:10px;"><%= error %></div>
    <% } %>
  </div>
</section>

<!-- socket.io는 레이아웃에 이미 포함되어 있지 않다면 아래 스크립트를 유지하세요 -->
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io('/room', { path: '/socket.io' });

  // ===== 시간 포맷터 =====
  function formatRelative(date) {
    if (!date) return '-';
    const diffMs = Date.now() - date.getTime();
    const totalMin = Math.max(0, Math.floor(diffMs / 60000));
    const days  = Math.floor(totalMin / 1440);
    const hours = Math.floor((totalMin % 1440) / 60);
    const mins  = totalMin % 60;
    const parts = [];
    if (days)  parts.push(days + '일');
    if (hours) parts.push(hours + '시간');
    if (mins || (!days && !hours)) parts.push(mins + '분');
    return parts.join(' ') + ' 전';
  }
  function formatAbsolute(date) {
    if (!date) return '-';
    const pad = n => String(n).padStart(2,'0');
    const y = date.getFullYear();
    const m = pad(date.getMonth()+1);
    const d = pad(date.getDate());
    const hh = pad(date.getHours());
    const mm = pad(date.getMinutes());
    const ss = pad(date.getSeconds());
    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;
  }

  // ===== 인원 갱신 유틸 =====
  function setRoomCount(roomId, current, max) {
    const row = document.querySelector(`#room-list tbody tr[data-id="${roomId}"]`);
    if (!row) return;

    if (typeof current === 'number') row.dataset.current = String(current);
    if (typeof max === 'number') row.dataset.max = String(max);

    const c = Number(row.dataset.current || current || 0);
    const m = Number(row.dataset.max || max || 0);

    const cell = document.getElementById(`count-${roomId}`);
    if (cell) cell.textContent = `${c} / ${m}`;
  }

  // ===== 새 방 추가 (서버 push) =====
  socket.on('newRoom', function (data) {
    const tbody = document.querySelector('#room-list tbody');
    const tr = document.createElement('tr');
    tr.dataset.id = data._id;

    const current = (data.current != null)
      ? data.current
      : (Array.isArray(data.members) ? data.members.length : 0);

    const createdAt = data.createdAt ? new Date(data.createdAt) : new Date();

    tr.dataset.current = String(current);
    tr.dataset.max = String(data.max);

    tr.innerHTML = `
      <td class="cell-title" title="${data.title || ''}">
        <span class="title-text">${data.title || ''}</span>
      </td>
      <td class="cell-type">${data.password ? '비밀방' : '공개방'}</td>
      <td class="cell-count" id="count-${data._id}">${current} / ${data.max}</td>
      <td class="cell-owner" title="${data.owner || ''}" ${data.ownerColor ? `style="color:${data.ownerColor}"` : ''}>
        <span class="owner-text">${data.owner || ''}</span>
      </td>
      <td class="action-cell">
        <button class="btn join-btn"
          data-password="${data.password ? 'true' : 'false'}"
          data-id="${data._id}">입장</button>
      </td>
      <td class="action-cell">
        <button class="btn glimpse-btn"
          data-password="${data.password ? 'true' : 'false'}"
          data-id="${data._id}">엿보기</button>
      </td>
      <td class="cell-created" title="${createdAt.toISOString()}">
        <span class="created-relative">${formatRelative(createdAt)}</span>
        <span class="created-sep"> · </span>
        <span class="created-abs">${formatAbsolute(createdAt)}</span>
      </td>
    `;
    //tbody.appendChild(tr);
    tbody.insertBefore(tr, tbody.firstChild);
  });

  // ===== 인원 변경 브로드캐스트 수신: { roomId, current, max } =====
  socket.on('roomCount', function (data) {
    if (!data || !data.roomId) return;
    setRoomCount(data.roomId, data.current, data.max);
  });

  // 방 제거
  socket.on('removeRoom', function (id) {
    document.querySelectorAll('#room-list tbody tr').forEach(function (tr) {
      if (tr.dataset.id === id) tr.remove();
    });
  });

  // 입장 버튼
  document.querySelector('#room-list tbody').addEventListener('click', function (e) {
    const btn = e.target.closest('.join-btn');
    if (!btn) return;

    if (btn.dataset.password === 'true') {
      const password = prompt('비밀번호를 입력하세요');
      location.href = '/room/' + btn.dataset.id + '?password=' + encodeURIComponent(password || '');
    } else {
      location.href = '/room/' + btn.dataset.id;
    }
  });

  // 엿보기 버튼
  document.querySelector('#room-list tbody').addEventListener('click', function (e) {
    const btn = e.target.closest('.glimpse-btn');
    if (!btn) return;

    if (btn.dataset.password === 'true') {
      const password = prompt('비밀번호를 입력하세요');
      location.href = '/glimpse/' + btn.dataset.id + '?password=' + encodeURIComponent(password || '');
    } else {
      location.href = '/glimpse/' + btn.dataset.id;
    }
  });


  // 에러 메시지 알림
  window.addEventListener('load', () => {
    const msg = new URL(location.href).searchParams.get('error');
    if (msg) alert(msg);
  });
</script>
